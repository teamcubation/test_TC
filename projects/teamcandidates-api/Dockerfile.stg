# ---------------------------------------------------
# Etapa 1: Builder (compilación)
# ---------------------------------------------------
    FROM golang:1.23-alpine AS builder

    # Configurar zona horaria y agregar paquetes necesarios para compilar
    ENV TZ=America/Argentina/Buenos_Aires
    RUN apk add --no-cache \
        tzdata \
        sqlite \
        sqlite-dev \
        gcc \
        musl-dev \
        git
    
    # Directorio de trabajo para la compilación
    WORKDIR /app
    
    # Copiar todo el código del teamcandidates (asegúrate de que se incluya el archivo go.mod correcto)
    COPY . .
    
    # (Opcional) Si manejas un teamcandidates multi-módulo y tienes un go.work, también cópialo:
    # COPY go.work .
    
    # Instalar dependencias de Go para el módulo de teamcandidates-api
    WORKDIR /app/projects/teamcandidates-api
    RUN go mod download && go mod verify
    
    # Si en tu proyecto hay otro módulo (por ejemplo, en /app/pkg) y es necesario para compilar teamcandidates-api,
    # puedes ejecutar:
    WORKDIR /app/pkg
    RUN go mod download && go mod verify
    
    # Volver al módulo de teamcandidates-api para compilar el binario, ya que allí se encuentra su go.mod.
    WORKDIR /app/projects/teamcandidates-api
    
    # Compilar el binario para Linux (se habilita CGO por requerir dependencias como SQLite)
    # Nota: Al estar en /app/projects/teamcandidates-api, la ruta al main es relativa a este directorio.
    RUN CGO_ENABLED=1 GOOS=linux go build -o /app/staging_binary ./cmd/api/
    
    # ---------------------------------------------------
    # Etapa 2: Imagen final para staging
    # ---------------------------------------------------
    FROM alpine:latest
    
    # Configurar la zona horaria y agregar paquetes necesarios en runtime.
    ENV TZ=America/Argentina/Buenos_Aires
    RUN apk add --no-cache tzdata sqlite
    
    # Directorio de trabajo en el contenedor final
    WORKDIR /app
    
    # Copiar el binario compilado desde la etapa builder
    COPY --from=builder /app/pkg  /app/pkg
    COPY --from=builder /app/staging_binary /app/staging_binary
    # Copiar el archivo .env desde el módulo teamcandidates-api (o desde donde lo tengas ubicado)
    COPY --from=builder /app/projects/teamcandidates-api/.env /app/projects/teamcandidates-api/.env
    
    # Exponer el puerto que utilice la aplicación (ajustá si es necesario)
    EXPOSE 8080
    
    # Comando de inicio de la aplicación
    CMD ["/app/staging_binary"]
