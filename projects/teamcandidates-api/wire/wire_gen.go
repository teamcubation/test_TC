// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/teamcubation/teamcandidates/pkg/authe/jwt/v5"
	"github.com/teamcubation/teamcandidates/pkg/brokers/rabbitmq/amqp091/producer"
	"github.com/teamcubation/teamcandidates/pkg/databases/cache/redis/v8"
	"github.com/teamcubation/teamcandidates/pkg/databases/nosql/cassandra/gocql"
	"github.com/teamcubation/teamcandidates/pkg/databases/nosql/mongodb/mongo-driver"
	"github.com/teamcubation/teamcandidates/pkg/databases/sql/gorm"
	"github.com/teamcubation/teamcandidates/pkg/databases/sql/postgresql/pgxpool"
	"github.com/teamcubation/teamcandidates/pkg/http/clients/resty"
	"github.com/teamcubation/teamcandidates/pkg/http/middlewares/gin"
	"github.com/teamcubation/teamcandidates/pkg/http/servers/gin"
	"github.com/teamcubation/teamcandidates/pkg/notification/smtp"
	"github.com/teamcubation/teamcandidates/pkg/websocket/gorilla"
	"github.com/teamcubation/teamcandidates/projects/teamcandidates-api/internal/assessment"
	"github.com/teamcubation/teamcandidates/projects/teamcandidates-api/internal/authe"
	"github.com/teamcubation/teamcandidates/projects/teamcandidates-api/internal/browser-events"
	"github.com/teamcubation/teamcandidates/projects/teamcandidates-api/internal/candidate"
	"github.com/teamcubation/teamcandidates/projects/teamcandidates-api/internal/category"
	"github.com/teamcubation/teamcandidates/projects/teamcandidates-api/internal/config"
	"github.com/teamcubation/teamcandidates/projects/teamcandidates-api/internal/event"
	"github.com/teamcubation/teamcandidates/projects/teamcandidates-api/internal/group"
	"github.com/teamcubation/teamcandidates/projects/teamcandidates-api/internal/item"
	"github.com/teamcubation/teamcandidates/projects/teamcandidates-api/internal/macrocategory"
	"github.com/teamcubation/teamcandidates/projects/teamcandidates-api/internal/notification"
	"github.com/teamcubation/teamcandidates/projects/teamcandidates-api/internal/person"
	"github.com/teamcubation/teamcandidates/projects/teamcandidates-api/internal/supplier"
	"github.com/teamcubation/teamcandidates/projects/teamcandidates-api/internal/tweet"
	"github.com/teamcubation/teamcandidates/projects/teamcandidates-api/internal/user"
)

// Injectors from wire.go:

// Initialize se encarga de inyectar todas las dependencias usando Wire.
func Initialize() (*Dependencies, error) {
	loader, err := ProvideConfigLoader()
	if err != nil {
		return nil, err
	}
	server, err := ProvideGinServer()
	if err != nil {
		return nil, err
	}
	repository, err := ProvideGormRepository()
	if err != nil {
		return nil, err
	}
	pkgmongoRepository, err := ProvideMongoDbRepository()
	if err != nil {
		return nil, err
	}
	pkgpostgresqlRepository, err := ProvidePostgresRepository()
	if err != nil {
		return nil, err
	}
	cache, err := ProvideRedisCache()
	if err != nil {
		return nil, err
	}
	service, err := ProvideJwtService()
	if err != nil {
		return nil, err
	}
	client, err := ProvideHttpClient()
	if err != nil {
		return nil, err
	}
	pkgsmtpService, err := ProvideSmtpService()
	if err != nil {
		return nil, err
	}
	producer, err := ProvideRabbitProducer()
	if err != nil {
		return nil, err
	}
	pkgcassandraRepository, err := ProvideCassandraRepository()
	if err != nil {
		return nil, err
	}
	upgrader, err := ProvideWebSocketUpgrader()
	if err != nil {
		return nil, err
	}
	handlerFunc, err := ProvideJwtMiddleware()
	if err != nil {
		return nil, err
	}
	middlewares, err := ProvideMiddlewares(handlerFunc)
	if err != nil {
		return nil, err
	}
	personRepository, err := ProvidePersonRepository(pkgpostgresqlRepository)
	if err != nil {
		return nil, err
	}
	useCases := ProvidePersonUseCases(personRepository)
	handler := ProvidePersonHandler(server, useCases, middlewares)
	groupRepository, err := ProvideGroupRepository(repository)
	if err != nil {
		return nil, err
	}
	groupUseCases := ProvideGroupUseCases(groupRepository)
	groupHandler := ProvideGroupHandler(server, groupUseCases, middlewares)
	eventRepository, err := ProvideEventRepository(pkgmongoRepository)
	if err != nil {
		return nil, err
	}
	eventUseCases := ProvideEventUseCases(eventRepository)
	eventHandler := ProvideEventHandler(server, eventUseCases, middlewares)
	userRepository, err := ProvideUserRepository(repository)
	if err != nil {
		return nil, err
	}
	userUseCases := ProvideUserUseCases(userRepository)
	userHandler := ProvideUserHandler(server, userUseCases, middlewares)
	assessmentRepository, err := ProvideAssessmentRepository(repository)
	if err != nil {
		return nil, err
	}
	smtpService, err := ProvideNotificationSmtpService(pkgsmtpService)
	if err != nil {
		return nil, err
	}
	notificationUseCases := ProvideNotificationUseCases(smtpService)
	candidateRepository, err := ProvideCandidateRepository(repository)
	if err != nil {
		return nil, err
	}
	candidateUseCases := ProvideCandidateUseCases(candidateRepository)
	autheCache, err := ProvideAutheCache(cache)
	if err != nil {
		return nil, err
	}
	jwtService, err := ProvideAutheJwtService(service, loader)
	if err != nil {
		return nil, err
	}
	httpClient, err := ProvideAutheHttpClient(client, loader)
	if err != nil {
		return nil, err
	}
	autheUseCases := ProvideAutheUseCases(autheCache, jwtService, httpClient)
	assessmentUseCases := ProvideAssessmentUseCases(assessmentRepository, notificationUseCases, candidateUseCases, loader, autheUseCases, useCases)
	assessmentHandler := ProvideAssessmentHandler(server, assessmentUseCases, middlewares)
	candidateHandler := ProvideCandidateHandler(server, candidateUseCases, middlewares)
	browserEventRepository, err := ProvideBrowserEventsRepository(pkgmongoRepository)
	if err != nil {
		return nil, err
	}
	browserEventUseCases := ProvideBrowserEventsUseCases(browserEventRepository)
	webSocket := ProvideBrowserEventsWebsocket(browserEventUseCases, upgrader)
	browserEventHandler := ProvideBrowserEventsHandler(server, browserEventUseCases, middlewares, webSocket)
	autheHandler := ProvideAutheHandler(server, autheUseCases, middlewares)
	notificationHandler := ProvideNotificationHandler(server, notificationUseCases, middlewares)
	tweetRepository, err := ProvideTweetRepository(pkgcassandraRepository)
	if err != nil {
		return nil, err
	}
	tweetCache, err := ProvideTweetCache(cache)
	if err != nil {
		return nil, err
	}
	broker, err := ProvideTweetBroker(producer)
	if err != nil {
		return nil, err
	}
	tweetUseCases := ProvideTweetUseCases(tweetRepository, userUseCases, tweetCache, broker)
	tweetHandler := ProvideTweetHandler(server, tweetUseCases, middlewares)
	itemRepository, err := ProvideItemRepository(repository)
	if err != nil {
		return nil, err
	}
	itemUseCases := ProvideItemUseCases(itemRepository, loader, autheUseCases)
	itemHandler := ProvideItemHandler(server, itemUseCases, middlewares)
	categoryRepository, err := ProvideCategoryRepository(repository)
	if err != nil {
		return nil, err
	}
	categoryUseCases := ProvideCategoryUseCases(categoryRepository)
	categoryHandler := ProvideCategoryHandler(server, categoryUseCases, middlewares)
	macrocategoryRepository, err := ProvideMacroCategoryRepository(repository)
	if err != nil {
		return nil, err
	}
	macrocategoryUseCases := ProvideMacroCategoryUseCases(macrocategoryRepository)
	macrocategoryHandler := ProvideMacroCategoryHandler(server, macrocategoryUseCases, middlewares)
	supplierRepository, err := ProvideSupplierRepository(repository)
	if err != nil {
		return nil, err
	}
	supplierUseCases := ProvideSupplierUseCases(supplierRepository)
	supplierHandler := ProvideSupplierHandler(server, supplierUseCases, middlewares)
	dependencies := &Dependencies{
		ConfigLoader:           loader,
		GinServer:              server,
		GormRepository:         repository,
		MongoRepository:        pkgmongoRepository,
		PostgresRepository:     pkgpostgresqlRepository,
		RedisCache:             cache,
		JwtService:             service,
		RestyClient:            client,
		SmtpService:            pkgsmtpService,
		RabbitProducer:         producer,
		CassandraRepository:    pkgcassandraRepository,
		WebSocket:              upgrader,
		Middlewares:            middlewares,
		PersonHandler:          handler,
		GroupHandler:           groupHandler,
		EventHandler:           eventHandler,
		UserHandler:            userHandler,
		AssessmentHandler:      assessmentHandler,
		CandidateHandler:       candidateHandler,
		BrowserEventsHandler:   browserEventHandler,
		BrowserEventsWebSocket: webSocket,
		AutheHandler:           autheHandler,
		NotificationHandler:    notificationHandler,
		TweetHandler:           tweetHandler,
		ItemHandler:            itemHandler,
		CategoryHandler:        categoryHandler,
		MacroCategoryHandler:   macrocategoryHandler,
		SupplierHandler:        supplierHandler,
		PersonUseCases:         useCases,
		UserUseCases:           userUseCases,
		TweetUseCases:          tweetUseCases,
		ItemUseCases:           itemUseCases,
	}
	return dependencies, nil
}

// wire.go:

// Dependencies reúne todas las dependencias de la aplicación que se inyectan con Wire.
type Dependencies struct {
	ConfigLoader        config.Loader
	GinServer           pkggin.Server
	GormRepository      pkggorm.Repository
	MongoRepository     pkgmongo.Repository
	PostgresRepository  pkgpostgresql.Repository
	RedisCache          pkgredis.Cache
	JwtService          pkgjwt.Service
	RestyClient         pkcresty.Client
	SmtpService         pkgsmtp.Service
	RabbitProducer      pkgrabbit.Producer
	CassandraRepository pkgcassandra.Repository
	WebSocket           pkgws.Upgrader

	Middlewares *pkgmwr.Middlewares

	PersonHandler          *person.Handler
	GroupHandler           *group.Handler
	EventHandler           *event.Handler
	UserHandler            *user.Handler
	AssessmentHandler      *assessment.Handler
	CandidateHandler       *candidate.Handler
	BrowserEventsHandler   *browserEvent.Handler
	BrowserEventsWebSocket browserEvent.WebSocket
	AutheHandler           *authe.Handler
	NotificationHandler    *notification.Handler
	TweetHandler           *tweet.Handler
	ItemHandler            *item.Handler
	CategoryHandler        *category.Handler
	MacroCategoryHandler   *macrocategory.Handler
	SupplierHandler        *supplier.Handler

	// Para pruebas
	PersonUseCases person.UseCases
	UserUseCases   user.UseCases
	TweetUseCases  tweet.UseCases
	ItemUseCases   item.UseCases
}
